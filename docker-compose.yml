services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsresolver.acme.email=${SSL_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsresolver.acme.storage=/letsencrypt/acme.json"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=${NETWORK_NAME:-binarydev}"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/access.log"
      - "--log.level=INFO"
      - "--log.filepath=/logs/traefik.log"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik:/letsencrypt
      - ./logs/traefik:/logs
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-binarydev}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-binarydb}
    volumes:
      - ./data/mongodb:/data/db
      - ./config/mongodb:/data/configdb
      - ./logs/mongodb:/var/log/mongodb
    networks:
      - ${NETWORK_NAME:-binarydev}
    ports:
      - "${MONGO_DB_PORT:-27017}:27017"
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
    command: ["sh", "-c", "redis-server --appendonly yes --requirepass \"$REDIS_PASSWORD\" --bind 0.0.0.0 --protected-mode yes"]
    volumes:
      - ./data/redis:/data
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY:-default_api_key}
      - QDRANT__STORAGE__PERFORM_CHECKS=false
    volumes:
      - ./data/qdrant:/qdrant/storage
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgresql:
    image: postgres:16
    container_name: postgresql
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-binarydb}
      - POSTGRES_USER=${POSTGRES_USER:-binarydev}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
      - ./config/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./config/postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./config/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-binarydev} -d ${POSTGRES_DB:-binarydb} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    command: >
      postgres 
      -c listen_addresses='*'
      -c port=5432
      -c log_destination='stderr'
      -c logging_collector=off
      -c log_statement=none
      -c log_min_messages=warning
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

networks:
  binarydev:
    name: ${NETWORK_NAME:-binarydev}
    external: true