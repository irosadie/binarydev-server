services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    command:
      - "--api.dashboard=true"
      # - "--api.insecure=true"
      - "--ping=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsresolver.acme.email=${SSL_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsresolver.acme.storage=/letsencrypt/acme.json"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=${NETWORK_NAME:-binarydev}"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/access.log"
      - "--log.level=INFO"
      - "--log.filepath=/logs/traefik.log"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik:/letsencrypt
      - ./logs/traefik:/logs
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${WEB_DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsresolver"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-root}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-admin}
      - MONGO_REPLICA_SET_NAME=${MONGO_REPLICA_SET_NAME:-rs0}
    command:
      [
        "mongod",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME:-rs0}",
        "--bind_ip_all",
      ]
    volumes:
      - ./data/mongodb:/data/db
      - ./config/mongodb/init-replica.js:/docker-entrypoint-initdb.d/init-replica.js:ro
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test:
        ["CMD-SHELL", "mongosh --eval 'db.adminCommand({ ping: 1 })' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
    command:
      [
        "sh",
        "-c",
        'redis-server --appendonly yes --requirepass "$REDIS_PASSWORD" --bind 0.0.0.0 --protected-mode yes',
      ]
    volumes:
      - ./data/redis:/data
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  bullmq-board:
    image: deadly0/bull-board:latest
    container_name: bullmq-board
    restart: unless-stopped
    ports:
      - "${BULLMQ_BOARD_PORT:-3001}:3000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - REDIS_USE_TLS=false
      - BULL_PREFIX=bull
    networks:
      - ${NETWORK_NAME:-binarydev}
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bullmq.rule=Host(`bullmq.${DOMAIN:-localhost}`)"
      - "traefik.http.services.bullmq.loadbalancer.server.port=3000"
      - "traefik.http.routers.bullmq.entrypoints=websecure"
      - "traefik.http.routers.bullmq.tls.certresolver=letsresolver"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT:-5672}:5672" # AMQP port
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-binarydev}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-B1n4ryd3vc01d}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-binarydev}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${DOMAIN:-localhost}`)"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      - "traefik.http.routers.rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq.tls.certresolver=letsresolver"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY:-default_api_key}
      # - QDRANT__STORAGE__PERFORM_CHECKS=false
    volumes:
      - ./data/qdrant:/qdrant/storage
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --tries=1 --spider http://localhost:6333/readyz || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgresql:
    image: postgres:16
    container_name: postgresql
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-binarydb}
      - POSTGRES_USER=${POSTGRES_USER:-binarydev}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
      - ./config/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./config/postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./config/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - ${NETWORK_NAME:-binarydev}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-binarydev} -d ${POSTGRES_DB:-binarydb} -h localhost",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    command: >
      postgres 
      -c listen_addresses='*'
      -c port=5432
      -c log_destination='stderr'
      -c logging_collector=off
      -c log_statement=none
      -c log_min_messages=warning
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

networks:
  binarydev:
    name: ${NETWORK_NAME:-binarydev}
    external: true
